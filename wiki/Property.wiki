#summary Properties and MVP example
#labels properties,mvp,swing,vaadin

= Introduction =
This API provides a way for accessing and binding properties.

= Details =
It extends the idea found on this blogs:
 * [http://www.matthicks.com/2009/07/death-of-beans.html http://www.matthicks.com/2009/07/death-of-beans.html]
 * [http//www.sgine.org/2010/08/properties-discussion.html http//www.sgine.org/2010/08/properties-discussion.html]
 * [http//www.sgine.org/2010/09/beans-should-be-deprecated-future-of.html http//www.sgine.org/2010/09/beans-should-be-deprecated-future-of.html]

but adds observables and the ability and binding properties and/or events.

This is the main [http://code.google.com/p/oxenjavacommons/source/browse/trunk/ar.com.oxen.commons/src/main/java/ar/com/oxen/commons/property/api/ package]. Here you can find the [http://code.google.com/p/oxenjavacommons/source/browse/trunk/ar.com.oxen.commons/src/main/java/ar/com/oxen/commons/property/api/Property.java Property] interface. It abstracts the access to a individual data item.

Another important interfaces are [http://code.google.com/p/oxenjavacommons/source/browse/trunk/ar.com.oxen.commons/src/main/java/ar/com/oxen/commons/property/api/Observable.java Observable] and [http://code.google.com/p/oxenjavacommons/source/browse/trunk/ar.com.oxen.commons/src/main/java/ar/com/oxen/commons/property/api/Observer.java Observer]. They implement the observer pattern, used here to handle events (I preferred creating new interfaces over JDK´s default [http://download-llnw.oracle.com/javase/6/docs/api/java/util/Observable.html Observer-Observable] implementation because this one required concrete inheritance).
Finally, the interface [http://code.google.com/p/oxenjavacommons/source/browse/trunk/ar.com.oxen.commons/src/main/java/ar/com/oxen/commons/property/api/ObservableProperty.java ObservableProperty] just combines Property and Observable.

Common implementations can be found on this [http://code.google.com/p/oxenjavacommons/source/browse/trunk/ar.com.oxen.commons/src/main/java/ar/com/oxen/commons/property/impl package]. The [http://code.google.com/p/oxenjavacommons/source/browse/trunk/ar.com.oxen.commons/src/main/java/ar/com/oxen/commons/property/impl/Binder.java Binder] class is important here: it allows binding properties and observables, so when one is changed/notified, the other one is automatically updated.


Beside the API and generic implementations, we have some specific adapters over existing technologies:
 * [http://code.google.com/p/oxenjavacommons/source/browse/trunk/ar.com.oxen.commons/src/main/java/ar/com/oxen/commons/property/impl/bean ar.com.oxen.commons.property.impl.bean] : Adapter over [http://www.oracle.com/technetwork/java/javase/tech/index-jsp-138795.html JavaBeans], typically useful for accessing model data.
 * [http://code.google.com/p/oxenjavacommons/source/browse/trunk/ar.com.oxen.commons/src/main/java/ar/com/oxen/commons/property/impl/swing ar.com.oxen.commons.property.impl.swing] : Adapters for accessing [http://download-llnw.oracle.com/javase/6/docs/technotes/guides/swing/ Swing] widgets
 * [http://code.google.com/p/oxenjavacommons/source/browse/trunk/ar.com.oxen.commons/src/main/java/ar/com/oxen/commons/property/impl/vaadin ar.com.oxen.commons.property.impl.vaadin] : Adapters for accessing [http://vaadin.com/home Vaadin] widgets.

(I didn´t include SWT just to avoid native libraries dependencies, but it can be built easily.)

Using this infrastructure, the sample projects contains some examples:
 * [http://code.google.com/p/oxenjavacommons/source/browse/trunk/ar.com.oxen.sample/src/main/java/ar/com/oxen/sample/mvp ar.com.oxen.sample.mvp] : A technology-independent MVP pattern implementation sample.
 * [http://code.google.com/p/oxenjavacommons/source/browse/trunk/ar.com.oxen.sample/src/main/java/ar/com/oxen/sample/mvp/swing ar.com.oxen.sample.mvp.swing] : The MVP sample with binding to [http://download-llnw.oracle.com/javase/6/docs/technotes/guides/swing/ Swing] components.
 * [http://code.google.com/p/oxenjavacommons/source/browse/trunk/ar.com.oxen.sample/src/main/java/ar/com/oxen/sample/mvp/vaadin ar.com.oxen.sample.mvp.vaadin] : The MVP sample with binding to [http://vaadin.com/home Vaadin] components.

This is just a proof of concept, but is a simple example of how to build a generic MVP with binding from UI to Presentation Model and to Model. We also build an [http://code.google.com/p/oxenandroidcommons/wiki/Property Android] implementation that runs the same example without modification.

Future Work:
 * Creating a Decorator over Property that provides validation.
 * Creating a Decorator over Property that provides data conversion.
 * How could it made less verbose? Specially the presentation model declaration.